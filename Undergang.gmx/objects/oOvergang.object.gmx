<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
gridWidth = 16;
gridHeight = 16;

aBlocks[0] = instance_create(320, 144, oBlock);
//(irandom(50) + 50
for(i = 1; i &lt; (irandom(100) + 300); i++) {
      var tmpParentBlock = aBlocks[irandom(i - 1)];
      aBlocks[i] = instance_create(tmpParentBlock.x + (irandom(2) - 1) * gridWidth, tmpParentBlock.y + (irandom(2) - 1) * gridHeight, oBlock);
      
      for(j = 0; j &lt; i; j++) {
            if(aBlocks[i].x == aBlocks[j].x &amp;&amp; aBlocks[i].y == aBlocks[j].y) {
                 tmpParentBlock = aBlocks[irandom(i - 1)];
                 aBlocks[i].x = tmpParentBlock.x + (irandom(2) - 1) * gridWidth;
                 aBlocks[i].y = tmpParentBlock.y + (irandom(2) - 1) * gridHeight;
                 j = 0;
            }
      }
}


var lengthNow = array_length_1d(aBlocks);
for(v = 1; v &lt; (room_width / gridWidth) - 1; v++) {
    for(h = 1; h &lt; (room_height / gridHeight) - 1; h++) {
          var neighbours = 0;
          
          var newV = v * gridWidth;
          var newH = h * gridHeight;
          
          for(i = 0; i &lt; lengthNow; i++) {
                iTmpBlock = aBlocks[i];
                if (iTmpBlock.x == newV - gridWidth &amp;&amp; iTmpBlock.y == newH - gridHeight) { neighbours++; }
                if (iTmpBlock.x == newV &amp;&amp; iTmpBlock.y == newH - gridHeight) { neighbours++; }
                if (iTmpBlock.x == newV + gridWidth &amp;&amp; iTmpBlock.y == newH - gridHeight) { neighbours++; }
                
                if (iTmpBlock.x == newV - gridWidth &amp;&amp; iTmpBlock.y == newH) { neighbours++; }
                if (iTmpBlock.x == newV + gridWidth &amp;&amp; iTmpBlock.y == newH) { neighbours++; }
                
                if (iTmpBlock.x == newV - gridWidth &amp;&amp; iTmpBlock.y == newH + gridHeight) { neighbours++; }
                if (iTmpBlock.x == newV &amp;&amp; iTmpBlock.y == newH + gridHeight) { neighbours++; }
                if (iTmpBlock.x == newV + gridWidth &amp;&amp; iTmpBlock.y == newH + gridHeight) { neighbours++; }
                
                //show_debug_message(string(neighbours));
                
          }
          if (neighbours &gt;= 2) {
                aBlocks[array_length_1d(aBlocks)] = instance_create(newV, newH, oBlockFilled);
          }
    }
}

var currentLongestRow = 0;
for(h = 0; h &lt; (room_height / gridHeight); h++) {
    var newLongestRow = 0;
    for(v = 0; v &lt; (room_width / gridWidth); v++) {
          var newV = v * gridWidth;
          var newH = h * gridHeight;
          
          for(i = 0; i &lt; array_length_1d(aBlocks); i++) {
                iTmpBlock = aBlocks[i];
                if (iTmpBlock.x == newV &amp;&amp; iTmpBlock.y == newH) { 
                   newLongestRow++; 
                   break;
                }
          }
          if (newLongestRow &gt; currentLongestRow) {
             currentLongestRow = h;
          }
    }
}
show_debug_message(string(currentLongestRow));

lengthNow = array_length_1d(aBlocks);
for(h = 0; h &lt; currentLongestRow; h++) {
    for(v = 0; v &lt; (room_width / gridWidth); v++) {
        var newV = v * gridWidth;
        var newH = h * gridHeight;
          
        for(i = 0; i &lt; lengthNow; i++) {
                    iTmpBlock = aBlocks[i];
                    if (instance_exists(iTmpBlock)) {
                        if (iTmpBlock.x == newV &amp;&amp; iTmpBlock.y == newH) { 
                            if (h == currentLongestRow - 1) { if (irandom(100) &lt; 0) { continue; } }
                            var TempList = ds_list_create();
                            for (j = 0; j &lt; lengthNow; j++)
                            {
                                ds_list_add(TempList, aBlocks[j]);
                            }
                            
                            var toBeDeleted = ds_list_find_value(TempList, i);
                            with(toBeDeleted) {
                                instance_destroy();
                                //lengthNow--;
                            }
                             
                            ds_list_delete(TempList, i);
                            
                            for (j = 0; j &lt; lengthNow - 1; j++)
                            {
                                aBlocks[j] = ds_list_find_value(TempList, j);
                            }
                            
                            
                        }
                    }
        }
    }
}

lengthNow = array_length_1d(aBlocks);
var spawnedFirst = false;
//var isLast = false;
for(h = 0; h &lt; currentLongestRow + 1; h++) {
    for(v = 0; v &lt; (room_width / gridWidth); v++) {
        var newV = v * gridWidth;
        var newH = h * gridHeight;
          
        for(i = 0; i &lt; lengthNow; i++) {
                    iTmpBlock = aBlocks[i];
                    if (instance_exists(iTmpBlock)) {
                        if (!spawnedFirst) {
                                spawnedFirst = true;
                                continue;
                        }
                        else if (iTmpBlock.x == newV &amp;&amp; iTmpBlock.y == newH) { 
                                aBlocks[array_length_1d(aBlocks)] = instance_create(newV, newH - gridHeight, oBlockFilled);
                        }
                    }
        }
    }
}

/*var TempList = ds_list_create();
for (j = 0; j &lt; lengthNow; j++)
{
    ds_list_add(TempList, aBlocks[j]);
}

var toBeDeleted = ds_list_find_value(TempList, array_length_1d(aBlocks));
with(toBeDeleted) {
    instance_destroy();
}
 
ds_list_delete(TempList, array_length_1d(aBlocks));

for (j = 0; j &lt; lengthNow - 1; j++)
{
    aBlocks[j] = ds_list_find_value(TempList, j);
}*/

show_debug_message("amount of blocks = "+string(array_length_1d(aBlocks)));
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
